{"version":3,"sources":["serviceWorker.js","globalVars.js","components/SingleCard.jsx","validators.js","components/AddTodoModal.jsx","components/AddTaskModal.jsx","components/DeleteTodoModal.jsx","components/LoadingSpinner.jsx","components/Cards.jsx","App.jsx","index.js"],"names":["Boolean","window","location","hostname","match","globalVars","BASE_API_URL","SingleCard","_Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","handleDone","taskID","action","axious","patch","is_done","then","res","props","onDone","catch","err","console","log","inherits","createClass","key","value","_this2","react_default","a","createElement","className","Card","children","CardTitle","title","CardBody","ListGroup","tasks","map","task","ListGroupItem","id","Button","color","onClick","Component","validators","get_token","URL","href","searchParams","get","error_message","data","input_id","error_wrapper_id","document","getElementById","style","borderColor","innerHTML","message","not_empty","property","hasOwnProperty","AddTodoModal","state","modal","formData","toggle","bind","assertThisInitialized","handleChange","handleSubmit","setState","prevState","e","target","preventDefault","axios","post","onSubmit","response","buttonLabel","Modal","isOpen","centered","ModalHeader","type","ModalBody","htmlFor","onChange","name","ModalFooter","AddTaskModal","form","serializer","hash","todo","DeleteTodoModal","delete","_this3","Badge","performDelete","LoadingSpinner","width","height","Cards","fetchTodos","todos","refreshData","success","Fragment","components_AddTodoModal","components_SingleCard","components_DeleteTodoModal","components_AddTaskModal","App","isProcessing","display","interceptors","request","use","config","Promise","reject","components_Cards","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d46c7fab.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const globalVars = {\n    \"BASE_API_URL\": \"http://azizcruz111.pythonanywhere.com\"\n}\n\nexport default globalVars","import React, { Component } from \"react\";\nimport {\n  Card,\n  CardTitle,\n  CardBody,\n  ListGroup,\n  ListGroupItem,\n  Button\n} from \"reactstrap\";\nimport globalVars from \"./../globalVars\";\n\nimport axious from \"axios\";\n\nexport class SingleCard extends Component {\n  handleDone = (taskID, action) => {\n    axious\n      .patch(`${globalVars.BASE_API_URL}/api/tasks/${taskID}/`, {\n        is_done: action\n      })\n      .then(res => this.props.onDone())\n      .catch(err => console.log(err));\n  };\n\n  render() {\n    return (\n      <div className=\" col-md-6 col-lg-4 p-2\">\n        <Card>\n          <dir className=\"deleteTodo\">{this.props.children[0]}</dir>\n          <CardTitle>\n            <h3 className=\"text-center font-weight-bold p-2\">\n              {this.props.title}\n            </h3>\n            {this.props.children[1]}\n          </CardTitle>\n          <CardBody>\n            <ListGroup>\n              {this.props.tasks.length === 0 ? (\n                <h3 className=\"text-center font-weight-bold\">No tasks</h3>\n              ) : (\n                \"\"\n              )}\n\n              {this.props.tasks.map(task => (\n                <ListGroupItem key={task.id}>\n                  <div className=\"row align-items-center tasks\">\n                    <div className=\"col-8\">\n                      <span className={task.is_done ? \"done\" : \"\"}>\n                        {task.task}\n                      </span>\n                    </div>\n                    <div className=\"col-4\">\n                      {task.is_done ? (\n                        <Button\n                          color=\"secondary\"\n                          onClick={() => {\n                            this.handleDone(task.id, false);\n                          }}\n                        >\n                          Undone\n                        </Button>\n                      ) : (\n                        <Button\n                          color=\"success\"\n                          onClick={() => {\n                            this.handleDone(task.id, true);\n                          }}\n                        >\n                          Done\n                        </Button>\n                      )}\n                    </div>\n                  </div>\n                </ListGroupItem>\n              ))}\n            </ListGroup>\n          </CardBody>\n        </Card>\n      </div>\n    );\n  }\n}\n\nexport default SingleCard;\n","// Validate if inputs are empty.\nfunction not_empty(data, property, color, message, input_id, error_wrapper_id) {\n\n    if (!data.hasOwnProperty(property)) {\n        document.getElementById(input_id).style.borderColor = color;\n        document.getElementById(error_wrapper_id).innerHTML =\n            message;\n        return false;\n    }\n\n    if (data.hasOwnProperty(property)) {\n        if (data[property].length === 0) {\n            document.getElementById(input_id).style.borderColor = color;\n            document.getElementById(error_wrapper_id).innerHTML =\n                message;\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction error_message(data, color, input_id, error_wrapper_id) {\n    if (input_id != null) {\n        document.getElementById(input_id).style.borderColor = color;\n    }\n    document.getElementById(error_wrapper_id).innerHTML = data.data.message\n}\n\nfunction get_token() {\n    const url = new URL(window.location.href)\n    const token = url.searchParams.get('simpleToken')\n    return token\n}\n\nexport default {\n    get_token,\n    error_message,\n    not_empty\n}","import React, { Component } from \"react\";\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from \"reactstrap\";\nimport axios from \"axios\";\nimport validators from \"./../validators\";\nimport globalVars from \"./../globalVars\";\n\nexport class AddTodoModal extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      modal: false,\n      formData: {\n        title: \"\"\n      }\n    };\n\n    this.toggle = this.toggle.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  toggle() {\n    this.setState(prevState => ({\n      modal: !prevState.modal\n    }));\n  }\n\n  handleChange(e) {\n    this.setState({\n      formData: {\n        title: e.target.value\n      }\n    });\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    const data = this.state.formData;\n\n    let result = validators.not_empty(\n      data,\n      \"title\",\n      \"#d63031\",\n      \"* Todo name can't be empty.\",\n      \"todo-title\",\n      \"task-input-error\"\n    );\n\n    if (result === false) {\n      return false;\n    }\n\n    axios\n      .post(\n        `${\n          globalVars.BASE_API_URL\n        }/api/todos/?simpleToken=${validators.get_token()}`,\n        data\n      )\n      .then(res => {\n        this.props.onSubmit(this.state.formData);\n        this.setState({ formData: { title: \"\" } });\n        this.toggle();\n      })\n      .catch(err => {\n        validators.error_message(\n          err.response,\n          \"#d63031\",\n          \"todo-title\",\n          \"task-input-error\"\n        );\n      });\n  }\n\n  render() {\n    return (\n      <div>\n        <Button color=\"success\" onClick={this.toggle}>\n          {this.props.buttonLabel}\n        </Button>\n        <Modal isOpen={this.state.modal} toggle={this.toggle} centered={true}>\n          <ModalHeader toggle={this.toggle}>Add new todo list +</ModalHeader>\n          <form type=\"post\" onSubmit={this.handleSubmit}>\n            <ModalBody>\n              <label htmlFor=\"todo-title\" className=\"mr-2\">\n                Title\n              </label>\n              <input\n                type=\"text\"\n                id=\"todo-title\"\n                onChange={this.handleChange}\n                name=\"title\"\n              />\n              <div id=\"task-input-error\" className=\"task-input-error\" />\n            </ModalBody>\n            <ModalFooter>\n              <Button color=\"primary\" type=\"submit\">\n                Add +\n              </Button>{\" \"}\n              <Button color=\"secondary\" onClick={this.toggle}>\n                Cancel\n              </Button>\n            </ModalFooter>\n          </form>\n        </Modal>\n      </div>\n    );\n  }\n}\n\nexport default AddTodoModal;\n","import React, { Component } from \"react\";\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from \"reactstrap\";\nimport axios from \"axios\";\nimport serializer from \"form-serialize\";\nimport validators from \"./../validators\";\nimport globalVars from \"./../globalVars\";\nexport class AddTaskModal extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      modal: false\n    };\n\n    this.toggle = this.toggle.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  toggle() {\n    this.setState(prevState => ({\n      modal: !prevState.modal\n    }));\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    const form = e.target;\n    const data = serializer(form, { hash: true });\n\n    let result = validators.not_empty(\n      data,\n      \"task\",\n      \"#d63031\",\n      \"* Task name can't be empty.\",\n      \"task-name\",\n      \"task-input-error\"\n    );\n\n    if (result === false) {\n      return false;\n    }\n\n    axios\n      .post(\n        `${\n          globalVars.BASE_API_URL\n        }/api/tasks/?simpleToken=${validators.get_token()}`,\n        data\n      )\n      .then(() => {\n        this.props.onSubmit();\n        this.toggle();\n      })\n      .catch(err => {\n        validators.error_message(\n          err.response,\n          \"#d63031\",\n          \"task-name\",\n          \"task-input-error\"\n        );\n      });\n  }\n\n  render() {\n    return (\n      <div className=\"\">\n        <Button color=\"primary\" onClick={this.toggle}>\n          {this.props.buttonLabel}\n        </Button>\n        <Modal\n          isOpen={this.state.modal}\n          toggle={this.toggle}\n          className={this.props.className}\n          centered={true}\n        >\n          <form onSubmit={this.handleSubmit}>\n            <ModalHeader toggle={this.toggle}>Add new task +</ModalHeader>\n            <ModalBody>\n              <label htmlFor=\"task-name\" className=\"mr-2\">\n                Task name\n              </label>\n              <input\n                type=\"text\"\n                id=\"task-name\"\n                name=\"task\"\n                onChange={this.handleChange}\n              />\n              <div id=\"task-input-error\" className=\"task-input-error\" />\n              <input type=\"hidden\" name=\"todo\" value={this.props.todo} />\n            </ModalBody>\n            <ModalFooter>\n              <Button type=\"submit\" color=\"primary\">\n                Add task +\n              </Button>{\" \"}\n              <Button color=\"secondary\" onClick={this.toggle}>\n                Cancel\n              </Button>\n            </ModalFooter>\n          </form>\n        </Modal>\n      </div>\n    );\n  }\n}\n\nexport default AddTaskModal;\n","import React, { Component } from \"react\";\nimport { Badge, Button, Modal, ModalBody, ModalFooter } from \"reactstrap\";\nimport validators from \"./../validators\";\nimport globalVars from \"./../globalVars\";\n\nimport axious from \"axios\";\n\nexport class DeleteTodoModal extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      modal: false\n    };\n\n    this.toggle = this.toggle.bind(this);\n  }\n\n  toggle() {\n    this.setState(prevState => ({\n      modal: !prevState.modal\n    }));\n  }\n\n  performDelete(id) {\n    axious\n      .delete(\n        `${\n          globalVars.BASE_API_URL\n        }/api/todos/${id}?simpleToken=${validators.get_token()}`\n      )\n      .then(res => {\n        this.toggle();\n        this.props.onSubmit();\n      })\n      .catch(err => {\n        validators.error_message(err.response, \"#d63031\", null, \"delete-error\");\n      });\n  }\n\n  render() {\n    return (\n      <div>\n        <Badge color=\"danger\" onClick={this.toggle}>\n          {this.props.buttonLabel}\n        </Badge>\n        <Modal\n          isOpen={this.state.modal}\n          toggle={this.toggle}\n          className={this.props.className}\n        >\n          <ModalBody>\n            <h4 id=\"delete-error\">\n              Are you sure you want to delete {this.props.title} ?\n            </h4>\n          </ModalBody>\n          <ModalFooter>\n            <Button\n              color=\"danger\"\n              onClick={() => this.performDelete(this.props.todo)}\n            >\n              Yes, Delete\n            </Button>{\" \"}\n            <Button color=\"secondary\" onClick={this.toggle}>\n              Cancel\n            </Button>\n          </ModalFooter>\n        </Modal>\n      </div>\n    );\n  }\n}\n\nexport default DeleteTodoModal;\n","import React from \"react\";\n\nexport default function LoadingSpinner() {\n  return (\n    <div>\n      <div className=\"lds-css ng-scope\">\n        <div\n          className=\"lds-spinner\"\n          id=\"lds-spinner\"\n          style={{ width: 100 + \"%\", height: 100 + \"%\" }}\n        >\n          <div />\n          <div />\n          <div />\n          <div />\n          <div />\n          <div />\n          <div />\n          <div />\n          <div />\n          <div />\n          <div />\n          <div />\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport SingleCard from \"./SingleCard\";\nimport AddTodoModal from \"./AddTodoModal.jsx\";\nimport AddTaskModal from \"./AddTaskModal\";\nimport DeleteTodoModal from \"./DeleteTodoModal\";\nimport LoadSpinner from \"./LoadingSpinner\";\nimport globalVars from \"./../globalVars\";\n\nexport class Cards extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      todos: [],\n      success: false\n    };\n  }\n\n  // Fetch todos from backend\n  fetchTodos = () => {\n    axios\n      .get(`${globalVars.BASE_API_URL}/api/todos/`)\n      .then(res => {\n        this.setState({ todos: res.data });\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n  componentDidMount() {\n    this.fetchTodos();\n  }\n\n  refreshData = () => {\n    this.setState({ success: true });\n    this.fetchTodos();\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <AddTodoModal\n          onSubmit={data => {\n            this.refreshData();\n          }}\n          buttonLabel=\"Add Todo +\"\n        />\n        <span>\n          <LoadSpinner />\n        </span>\n        {this.state.todos.length > 0 ? (\n          <div className=\"row\">\n            {this.state.todos.map(todo => (\n              <SingleCard\n                key={todo.id}\n                title={todo.title}\n                tasks={todo.tasks}\n                onDone={() => {\n                  this.fetchTodos();\n                }}\n              >\n                <DeleteTodoModal\n                  buttonLabel=\"Delete X\"\n                  todo={todo.id}\n                  title={todo.title}\n                  onSubmit={() => {\n                    this.refreshData();\n                  }}\n                />\n                <AddTaskModal\n                  buttonLabel=\"Add Task +\"\n                  todo={todo.id}\n                  onSubmit={data => {\n                    this.refreshData();\n                  }}\n                />\n              </SingleCard>\n            ))}\n          </div>\n        ) : (\n          <h1 className=\"text-center\">You have no todos</h1>\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Cards;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Cards from \"./components/Cards.jsx\";\nimport axios from \"axios\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isProcessing: false\n    };\n  }\n\n  isProcessing(isProcessing) {\n    if (isProcessing) {\n      document.getElementById(\"lds-spinner\").style.display = \"block\";\n    } else {\n      document.getElementById(\"lds-spinner\").style.display = \"none\";\n    }\n  }\n\n  componentDidMount() {\n    axios.interceptors.request.use(\n      config => {\n        this.isProcessing(true);\n        return config;\n      },\n      err => {\n        this.isProcessing(false);\n        return Promise.reject(err);\n      }\n    );\n\n    axios.interceptors.response.use(\n      response => {\n        this.isProcessing(false);\n        return response;\n      },\n      err => {\n        this.isProcessing(false);\n        return Promise.reject(err);\n      }\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"main-app\">\n        <div className=\"container p-3\">\n          <Cards />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './DeleteModal.css';\nimport './AddTaskModal.css';\nimport './index.css';\nimport App from './App.jsx';\n\n\nReactDOM.render( < App / > , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}